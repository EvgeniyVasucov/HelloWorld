using Newtonsoft.Json;
using System.Data;
class Program
{
    static async Task Main()
    {
        Dictionary<int, Type> typeByNumber = new Dictionary<int, Type>()
        {
        {0,typeof(Int32)},
        {1,typeof(Object)},
        {2,typeof(DBNull)},
        {3,typeof(Boolean)},
        {4,typeof(Char)},
        {5,typeof(SByte)},
        {6,typeof(Byte)},
        {7,typeof(Int16)},
        {8,typeof(UInt16)},
        {9,typeof(Int32)},
        {10,typeof(UInt32)},
        {11,typeof(Int64)},
        {12,typeof(UInt64)},
        {13,typeof(Single)},
        {14,typeof(Double)},
        {15,typeof(Decimal)},
        {16,typeof(DateTime)},
        {18,typeof(String)},
        {19,typeof(Guid)},
        {0x8000,typeof(Array)},
        };
        HttpClient httpClient = new HttpClient();

        string dirName = @"D:\SomeDoc";
        DirectoryInfo dirInfo = new DirectoryInfo(dirName);
        if (!dirInfo.Exists)
        {
            dirInfo.Create();
        }
        string? path1 = @"D:\SomeDoc\doc1.html";
        string? path2 = @"D:\SomeDoc\doc2.html";

        string request = "https://keysystems.ru/files/misc/tasks/doc1.json";
        HttpResponseMessage response = (await httpClient.GetAsync(request)).EnsureSuccessStatusCode();
        string responseBody1 = await response.Content.ReadAsStringAsync();
        GetDataSet(responseBody1, path1);  // создание 1-й таблицы DataSet и документа HTML 

        string request2 = "https://keysystems.ru/files/misc/tasks/doc2.json";
        HttpResponseMessage response2 = (await httpClient.GetAsync(request2)).EnsureSuccessStatusCode();
        string responseBody2 = await response2.Content.ReadAsStringAsync();
        GetDataSet(responseBody2, path2);  // создание 2-й таблицы DataSet и документа HTML 

        void GetDataSet(string responseBody, string path)
        {
            Text text = JsonConvert.DeserializeObject<Text>(responseBody)!;
            DataSet dataSet = new DataSet(text.DataSetName);
            for (int l = 0; l < text.Tables.Count(); l++)
            {
                DataTable dataTable = new DataTable(text?.Tables?[l].TableName);
                dataSet.Tables.Add(dataTable); // добавляем таблицу в dataset
                if (text?.Tables?[l].Columns == null || text?.Tables?[l].Rows == null) continue; // проверка на null столбцов и строк 
                foreach (var item in text?.Tables?[l].Columns)
                {
                    string[] itemSptlit = item.ToString().Split(":");
                    dataTable.Columns.Add(itemSptlit[0], typeByNumber[Convert.ToInt32(itemSptlit[1])]);
                }
                foreach (DataColumn item in dataTable.Columns)
                {
                    item.AllowDBNull = true;
                }
                DataRow row = dataTable.NewRow();
                for (int i = 0; i < text?.Tables?[l].Columns?.Length; i++)
                {
                    if (dataTable.Columns[i].DataType != typeof(DateTime) && dataTable.Columns[i].DataType != typeof(string)
                        && dataTable.Columns[i].DataType != typeof(Guid))
                    {
                        var x = text?.Tables?[l].Rows?[0][i] != null
                            ? JsonConvert.DeserializeObject(text?.Tables?[l].Rows[0][i].ToString()!, dataTable.Columns[i].DataType)
                            : null;
                        row[i] = x != null ? x : DBNull.Value;
                    }
                    else
                    {
                        var x = text?.Tables?[l].Rows?[0][i];
                        row[i] = x != null ? x : DBNull.Value;
                    }
                }
                dataTable.Rows.Add(row);
            }
            //вывод
            FileInfo fileInf = new FileInfo(path);
            if (fileInf.Exists)
            {
                File.Delete(path);
            }
            StreamWriter streamwriter = new StreamWriter(path);
            streamwriter.WriteLine("<!DOCTYPE html><html>");
            streamwriter.WriteLine("<head><meta charset='utf-8'><title>Таблица HTML</title></head>");
            streamwriter.WriteLine($"<caption><b>{text?.DataSetName}</b></caption>");
            foreach (DataTable table in dataSet.Tables)
            {
                streamwriter.WriteLine($"<caption><b> {table.TableName} </b></caption>");
                streamwriter.WriteLine("<body><table>");
                foreach (DataRow row in table.Rows)
                {
                    foreach (DataColumn column in table.Columns)
                    {
                        streamwriter.WriteLine("<thead><tr>");
                        streamwriter.WriteLine($"<td>{column}</td>");
                        streamwriter.WriteLine("</tr></thead>");
                        streamwriter.WriteLine($"<tbody><tr><td>{row[column]}</td></tr></tbody>");
                        streamwriter.WriteLine("</tr>");
                    }
                }
                streamwriter.WriteLine("</table></body></html>");
            }
            streamwriter.Close();
        }
    }
}
public class Text
{
    public string? DataSetName { get; set; }
    public List<Table>? Tables { get; set; }
}
public class Table
{
    public string? TableName { get; set; }
    public object[]? Columns { get; set; }
    public object[][]? Rows { get; set; }
    public object[]? DeletedRows { get; set; }
}
